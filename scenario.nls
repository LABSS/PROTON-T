to load-opinions
  let opinions read-csv "bootstrapped_data"
  ask citizens [
    let my-key (list
      age-class
      ifelse-value get "male?"      [ 1 ] [ 0 ]
      ifelse-value get "immigrant?" [ 1 ] [ 0 ]
      ifelse-value get "muslim?"    [ 1 ] [ 0 ])
    ;show my-key
    let l filter [ line -> sublist line 0 4 = my-key ] opinions
    if length l = 0 [ show my-key ]
    let my-prototype one-of filter [ line -> sublist line 0 4 = my-key ] opinions
    ;show my-prototype
    foreach range 3  [ i -> 
      set-opinion-value item i topics-list item (i + 4) my-prototype
    ]
  ]
end

to-report age-class; citizen reporter. Classes from ZA4584_cdb.pdf page 1224
  let thresholds [ 29 44 59 74 89 999 ]
  let i 0
  while [ age > item i thresholds ] [ set i i + 1 ]
  report i + 1
end 

to-report propensity-factors ; citizen reporter
                             ; first item is weight (in R+), second item is value (in [-1, 1])
                             ; todo: confirm weight for attribute factors
                             ; todo: figure out the best way to convert odds ratio to weights
  report (list
    [ -> ifelse-value (get "male?")             [ 0.113 ] [ 0     ] ]
    [ -> ifelse-value (employed?)               [ 0     ] [ 0.208 ] ]
    [ -> ifelse-value (get "criminal-history?") [ 0.678 ] [ 0     ] ]
    [ -> ifelse-value (get "immigrant?")        [ 0.081 ] [ 0     ] ]
    [ -> ifelse-value (get "authoritarian?")    [ 0.9   ] [ 0     ] ]
    [ -> ifelse-value (age <= 25)               [ 0.1   ] [ 0     ] ]
  )
end

to-report normalized-opinion-on-topic [ the-topic ]
  report [ (value + 1) / 2 ] of opinion-on-topic the-topic
end


to-report make-attributes-set [ the-area ] ; citizen procedure. Warning: sets age as a side effect.
  let my-group rnd:weighted-one-of-list table:get population-details the-area [ i -> last i ]
  set birth-year -1 * item 3 my-group
  report table:from-list (list
    (list "male?"      item 1 my-group)
    (list "muslim?"    item 2 my-group)
    (list "immigrant?" item 0 my-group)
    (list "authoritarian?" one-of [true false])
    (list "criminal-history?" one-of [true false])
  )
end

to-report local-table-by [ name the-area ]
  report table:get table:from-list table:get local name the-area
end 

; this runs before resize, so it should not operate on turtles or links.
to load-totals
  set local group-by-first-item read-csv "neighborhoods"
  set population group-by-first-item read-csv "neukolln-totals"
  set areas table:keys population
  assert [ -> sqrt length  areas = round sqrt length areas ]
  set area-names map [ i -> first first (table:get population i) ] areas
  set area-population map [ i -> last first table:get population i ] areas
  set area-population table:from-list map [ i -> list i round
    (item (i - 1) area-population / sum area-population * total-citizens) ] areas
  set population-details group-by-first-item read-csv "neukolln-by-citizenship-migrantbackground-gender-religion-age"   
end 

to-report location-names
  report (list "radical mosque" "mosque" "community center" "workplace" "public space" "coffee") 
end

to-report location-definitions [ the-area ]
    report (list
    ;                        number                                  name/shape size
    (list (local-table-by "num of mosques"          the-area - 
      local-table-by "numof radical mosques"        the-area)          "mosque"    3)
    (list local-table-by "num of community centers" the-area "community center"    3)      
    (list local-table-by "num of parks"             the-area     "public space"    3)  
    (list  5                                                        "workplace"    3)
    (list local-table-by "numof radical mosques"    the-area   "radical mosque"    3)
    (list local-table-by "numof coffees"            the-area           "coffee"    1)
  )
end

to-report website-definitions
  report (list
    (list "Non integration" -1)
    (list "Non integration"  1) 
  )
end

to-report mandatory-activity-definition-list
  report (list
    ;     start-time duration location-type task         criteria
    (list          0        8 "residence"   [ -> sleep ] [ -> true ] )
  )
end

to-report job-definition-list
  report (list
    ;     num-jobs start-time duration location-type task          criteria             priority 
    ;  inizialization
    (list        1          8       12 "mosque"      [ -> preach ] [ -> age >= 21 and
      get "muslim?" and get "male?" ]                                                                1
    )
    (list        1          8       12 "radical mosque"      [ -> preach ] [ -> age >= 21 and
      get "muslim?" and get "male?" ] 0
    )    
    (list        1          8        12 "community center" [ -> preach ] [ -> age >= 18
      ]                                   0
    )     
    (list       50          8        8 "workplace"        [ -> work   ] [ -> age >= 18 ]             2
    )
  )
end

to-report free-time-activity-definition-list
  report (list
    ;     location-type task             criteria
    (list "residence"        [ -> socialize ] [ -> true ])
    (list "coffee"           [ -> socialize ] [ -> true ])
    (list "public space"     [ -> socialize ] [ -> true ])
    (list "mosque"           [ -> socialize ] [ -> get "muslim?" ])
    (list "community center" [ -> socialize ] [ -> true ])
  )
end

to work ; generic work activity
  if random-float 1 < work-socialization-probability [ socialize ]
end

to preach
  let result talk-to other citizens-here one-of topics ; calling talk-to for its side effects
end

to-report topic-definitions
  let uniform [ -> -1 + random-float 2 ]
  ; Criteria are reporters with one speaker (myself) and one listener (self). 
  ; This makes the criteria compatible with the ones in activities.
  ; the risk and protection are used in risk calculation.
  report (list
    ;      type                             value     criteria    risk-weight protective-weight
    (list "Non integration"                 uniform   [ -> true ]    0.188     0.178)
    (list "Institutional distrust"          uniform   [ -> true ]    0.277     0.153)
    (list "Collective relative deprivation" uniform   [ -> [ get "muslim?" ] of myself and get "muslim?" ]  0.116     0    )
  )
end

to-report topics-list report map [ l -> first l ] topic-definitions end

to post-opinions-setup [ the-places the-topic-name the-value the-criteria ]
  let n count the-places
  let the-topic topic-by-name the-topic-name
  ; initialize opinions about extremist websites
  let the-websites websites with [
    out-topic-link-to the-topic != nobody and
    [ value ] of out-topic-link-to the-topic = the-value
  ]
  ask n-of n citizens with [ runresult the-criteria ] [
    ask out-topic-link-to the-topic [
      set value the-value
    ]
    create-website-links-to the-websites [
      set value the-value
    ]
  ]
end

to-report calc-radicalization-threshold
  let big-list sort-on [ -1 * risk ] citizens
  report [ risk ] of item (radicalization-percentage * count citizens) big-list
end

; citizen procedure
to set-opinion-value [ the-topic the-value ]
  ask out-topic-link-to topic-by-name the-topic [
    set value the-value
  ]
end  

to-report workday-nonmuslim? report member? week-num (range 1 6)                                                             end ; citizen reporter
to-report weekday            report item week-num [ "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" ] end ; citizen reporter
to-report workday-muslim?    report member? week-num (range 0 5)                                                             end ; citizen reporter
to-report workday?           report ifelse-value get "muslim?" [ workday-muslim? ] [ workday-nonmuslim? ]                    end ; citizen reporter
