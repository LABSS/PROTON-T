to load-opinions
  let opinions read-csv "combination_data"  
  let table table:group-items opinions [ line -> sublist line 0 4 ]; group the rows by lists with initial 4 items
  ask  citizens [
    let my-key (list
      ifelse-value get "immigrant?" [ 1 ] [ 0 ]
      ifelse-value get "male?"      [ 1 ] [ 0 ]
      ifelse-value get "muslim?"    [ 1 ] [ 0 ]
                   age-class)
    let l item 0 table:get table my-key
    ; l looks like this: [0 0 1 5 "[-0.06, ..]" "[0.89,..]" "[0.70,..]" "[0.91,..]"]
    ; netlogo does not understand commas, but once removed them, 
    ; the runresult of the string is the list we need. 
    let f-list runresult remove "," item 7 l 
    ; j is the individual chosen at random
    let j random length f-list
    set fundamentalism-score item j f-list
    ; then we set the three opinions to the same individual j, inverting when needed    
    set-opinion-value "Non integration" -1 * item j runresult remove "," item 4 l
    set-opinion-value "Institutional distrust" -1 * item j runresult remove "," item 5 l    
    set-opinion-value "Collective relative deprivation" item j runresult remove "," item 6 l
  ]
  let auth-threshold mean [ fundamentalism-score ] of citizens + 
    standard-deviation [ fundamentalism-score ] of citizens
  ask citizens [ 
    table:put attributes "authoritarian?" fundamentalism-score >= auth-threshold
  ]
end

to export-opinions [ id ]
  csv:to-file (word "opinions-at-" ticks "-" id ".csv") [ 
    (list
      get "immigrant?" 
      get "male?"     
      get "muslim?"   
      age-class
      opinion-on-topic "Non integration"         
      opinion-on-topic "Institutional distrust"    
      opinion-on-topic "Collective relative deprivation"
      fundamentalism-score) 
  ] of citizens
end

to-report age-class; citizen reporter. Classes from ZA4584_cdb.pdf page 1224
  let thresholds [ 29 44 59 74 89 999 ]
  let i 0
  while [ age > item i thresholds ] [ set i i + 1 ]
  report i + 1
end 

to-report propensity-factors ; citizen reporter
                             ; a list of reporters on citizens scores)
  report (list
    [ -> ifelse-value (get "male?")             [ 0.113 ] [ 0     ] ]
    [ -> ifelse-value (employed?)               [ 0     ] [ 0.208 ] ]
    [ -> ifelse-value (get "criminal-history?") [ 0.678 ] [ 0     ] ]
    [ -> ifelse-value (get "immigrant?")        [ 0.081 ] [ 0     ] ]
    [ -> ifelse-value (get "authoritarian?")    [ 0.9   ] [ 0     ] ]
    [ -> ifelse-value (age <= 25)               [ 0.1   ] [ 0     ] ]
  )
end

;                                >0 , <1
to change-global-gender-ratio [ target-ratio ]
  let ratio-m []
  foreach areas [ a -> 
    let males-pop sum map [ i -> last i ] filter [ i -> item 1 i ] table:get population-details a 
    let females-pop sum map [ i -> last i ] filter [ i -> not item 1 i ] table:get population-details a 
    set ratio-m lput (males-pop / (males-pop + females-pop)) ratio-m 
  ]
  let l []
  foreach areas [ a ->
    foreach table:get population-details a [ i ->
      ; i here is [ immigrant? male? muslim?  age weight ]
      ; we update the weight by dividing for the old mean and multiplying for the new
      set l lput fput a replace-item 4 i (item 4 i * ifelse-value (item 1 i) [ ; male
        target-ratio / item (a - 1) ratio-m
      ] [ ; female
        (1 - target-ratio) / (1 - item (a - 1) ratio-m)
      ] ) l
    ]
  ]
  set population-details group-by-first-item  l
end

to-report make-attributes-set [ the-area ] ; citizen procedure. Warning: sets age as a side effect.
  let my-group rnd:weighted-one-of-list table:get population-details the-area [ i -> last i ]
  set birth-year -1 * item 3 my-group
  report table:from-list (list
    (list "immigrant?" item 0 my-group)
    (list "male?"      item 1 my-group)
    (list "muslim?"    item 2 my-group)    
    (list "criminal-history?" one-of [true false])
  )
end

to-report local-table-by [ name the-area ]
  report table:get table:from-list table:get local name the-area
end 

; this runs before resize, so it should not operate on turtles or links.
to load-totals
  set local group-by-first-item read-csv "neighborhoods"
  let population group-by-first-item read-csv "neukolln-totals"
  set areas table:keys population
  assert [ -> sqrt length  areas = round sqrt length areas ]
  set area-names map [ i -> first first (table:get population i) ] areas
  set area-population map [ i -> last first table:get population i ] areas
  ; area-population gives the right number of citizens per neighborhood
  set area-population table:from-list map [ i -> list i round
    (item (i - 1) area-population / sum area-population * total-citizens) ] areas
  ; population-details has, by area and cell, the cell population to use as a weight when drawing attributes.
  ; example: [[ 1 [[.. ]..[false false false 119 29.675] [false false true 16 79] ..] [2.. ]]
  set population-details group-by-first-item read-csv "neukolln-by-citizenship-migrantbackground-gender-religion-age"   
end 

to-report location-names
  report (list "propaganda place" "community center" "public space" "workplace" "coffee") 
end

to-report location-definitions [ the-area ]
    report (list
    ;                        number                                  name/shape size
    (list local-table-by "num of mosques"           the-area "propaganda place"    3)
    (list local-table-by "num of community centers" the-area "community center"    3)      
    (list local-table-by "num of parks"             the-area     "public space"    3)  
    (list  5                                                        "workplace"    3)
    (list local-table-by "numof coffees"            the-area           "coffee"    1)
  )
end

to-report mandatory-activity-definition-list
  report (list
    ;     start-time duration location-type task         
    (list          0        8 "residence"   [ -> sleep ] )
  )
end

to-report job-definition-list
  report (list
    ;     num-jobs start-time duration location-type task                       priority 
    ;  inizialization
    (list       number-workers-per-community-center
                            8        12 "community center" [ -> preach ]    0)     
    (list        1         12        12 "propaganda place" [ -> preach ]    0)     
    (list       round (population-employed-% * total-citizens / 100 / 20)
                            8        8 "workplace"         [ -> work   ]    2)
  )
end

to-report free-time-activity-definition-list
  report (list
    ;     location-type      task             
    (list "residence"        [ -> socialize ]        )
    (list "residence"        [ -> socialize-online ] )
    (list "coffee"           [ -> socialize ]        )
    (list "public space"     [ -> socialize ]        )
    (list "propaganda place" [ -> socialize ]        )
    (list "community center" [ -> socialize ]        )
  )
end

to work ; generic work activity
  if random-float 1 < work-socialization-probability [ socialize ]
end

to preach
  let result talk-to other citizens-here one-of topics ; calling talk-to for its side effects
end

to-report topic-definitions
  ; Criteria are reporters with one speaker (myself) and one listener (self). 
  ; This makes the criteria compatible with the ones in activities.
  ; the risk and protection are used in risk calculation.
  report (list
    ;      type                                 risk-weight protective-weight
    (list "Non integration"                     0.188     0.178)
    (list "Institutional distrust"              0.277     0.153)
    (list "Collective relative deprivation"     0.116     0    )
  )
end

to-report topics-list report map [ l -> first l ] topic-definitions end

to-report calc-radicalization-threshold
  let big-list sort-on [ -1 * risk ] citizens
  report [ risk ] of item (radicalization-percentage * count citizens - 1) big-list
end

; citizen procedure
to set-opinion-value [ the-topic the-value ]
  assert [ -> is-number? the-value ]
  create-topic-link-to topic-by-name the-topic [
    set value the-value
  ]
end  

to-report workday-nonmuslim? report member? week-num (range 1 6)                                                             end ; citizen reporter
to-report weekday            report item week-num [ "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" ] end ; citizen reporter
to-report workday-muslim?    report member? week-num (range 0 5)                                                             end ; citizen reporter
to-report workday?           report ifelse-value get "muslim?" [ workday-muslim? ] [ workday-nonmuslim? ]                    end ; citizen reporter
